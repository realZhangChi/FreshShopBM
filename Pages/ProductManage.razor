@page "/productManage"

@using System.IO;
@using DevExpress.Blazor
@using FreshShopBM.Data
@using FreshShopBM.Data.Models
@using FreshShopBM.Data.Services.ProductService
@using Blazor.FileReader
@using Telerik.Blazor
@using Telerik.Blazor.Components.Window
@using Telerik.Blazor.Components.Button

@inject IProductService ProductService
@inject WeatherForecastService ForecastService
@inject IJSRuntime IJSRuntime
@inject IFileReaderService FileReaderService

<div>
    <div class="d-flex flex-row">
        <label>主分类：</label>
        <DxComboBox Data=@mainCategories 
            TextFieldName="Name"
            SelectedItem="@mainCategory" 
            SelectedItemChanged="@MainCategoryChanged"/>
        <label class="ml-3">子分类：</label>
        <DxComboBox Data=@subCategories
            TextFieldName="Name"
            SelectedItem="@subCategory"
            SelectedItemChanged="@SubCategoryChanged"/>
        
    </div>
    <div class="mt-3">
        @if (_products == null)
        {
            <p><em>请选择分类列表</em></p>
        }
        else
        {
            <DxDataGrid Data=@_products
                RowRemoving=@((dataItem) => OnRowRemoving(dataItem))
                RowUpdating=@((updatingDataItem, newValues) => OnRowUpdating(updatingDataItem, newValues))
                RowInserting=@((newValues) => OnRowInserting(newValues))>
                <DxDataGridColumn Field="ProductId"
                    Caption="Id" Width="100px"/>
                <DxDataGridColumn Field="ProductName"
                    Caption="产品名"/>
                <DxDataGridColumn Field="Unit"
                    Caption="单位"/>  
                <DxDataGridColumn Field="UnitPrice"
                    Caption="单价"/>  
                <DxDataGridColumn Field="MinOrderQuantity"
                    Caption="起购量"/>
                <DxDataGridCommandColumn Width="150px"></DxDataGridCommandColumn>  
            </DxDataGrid>
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>产品名</th>
                        <th>单位</th>
                        <th>单价</th>
                        <th>起购量</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in _products)
                    {
                        <tr>
                            <td>@product.ProductId.ToString()</td>
                            <td>@product.ProductName</td>
                            <td>@product.Unit</td>
                            <td>@product.UnitPrice</td>
                            <td>@product.MinOrderQuantity</td>
                            <td>
                                <button type="button" 
                                    class="btn btn-primary ml-2" 
                                    onclick="@(() =>ModifyBtnClicked(product.ProductId))">修改
                                </button>

                                <button type="button" 
                                    class="btn btn-primary ml-2" 
                                    data-id="@product.ProductId">删除
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <input type="file" id="fileUpload" ref="fileUpload" onchange="@UploadFile"/>
    </div>
</div>


@functions{
    private List<MainCategoryModel> mainCategories;
    private SubCategoryModel[] subCategories;
    private MainCategoryModel mainCategory;
    private SubCategoryModel subCategory;
    private List<ProductsModel> _products;
    private ElementRef fileUpload;
    private bool _subCategorySelected = false;
    private bool WindowVisible;

    private string _token;
    protected override async Task OnInitAsync()
    {
        _token = GlobalSetting.Instance.AccessToken;
        mainCategories = await ProductService.GetMainCategoriesAsync(_token);
    }

    private async void MainCategoryChanged(MainCategoryModel model)
    {
        mainCategory = model;
        if (string.IsNullOrWhiteSpace(_token))
        {
            _token = GlobalSetting.Instance.AccessToken;
        }

        subCategories = await ProductService.GetSubCategoriesAsync(_token, model.Id);
        StateHasChanged();
    }

    private async void SubCategoryChanged(SubCategoryModel model)
    {
        subCategory = model;
        if (string.IsNullOrWhiteSpace(_token))
        {
            _token = GlobalSetting.Instance.AccessToken;
        }

        _products = await ProductService.GetProductsAsync(_token, model.Id);
        StateHasChanged();
        _subCategorySelected = true;
    }

    private void ModifyBtnClicked(Guid sender)
    {

    }

    private async Task UploadFile()
    {
        var files = await FileReaderService.CreateReference(fileUpload).EnumerateFilesAsync();
        var file = files.First();
        var a = files.Count();
        using (MemoryStream memoryStream = await files.First().CreateMemoryStreamAsync(4096))
        {
            byte[] bytes = memoryStream.ToArray();

            var imageData = $"data:image/jpg;base64,{Convert.ToBase64String(bytes)}";
            var response = ProductService.UploadImage(_token, imageData);
        }
    }

    private async void OnRowInserting(Dictionary<string, object> newValues)
    {
        var type = typeof(ProductsModel);
        var newProduct = new ProductsModel();
        newProduct.SubCategoryId = subCategory.Id;
        newProduct.PictureUrl = "https://www.alwayslight.cn/images/daBaiCai.jpg";
        foreach(var value in newValues)
        {
            var property = type.GetProperty(value.Key);
            if(property.PropertyType == typeof(double))
            {
                var data = Convert.ToDouble(value.Value);
                property.SetValue(newProduct, data);
            }
            else if(property.PropertyType == typeof(int))
            {
                var data = Convert.ToInt32(value.Value);
                property.SetValue(newProduct, data);
            }
            else
            {
                property.SetValue(newProduct, value.Value.ToString());
            }
        }
        await ProductService.AddOrUpdateProductAsync(_token, newProduct);
    }

    private async void OnRowRemoving(ProductsModel dataItem)
    {
        await ProductService.DeleteProductAsync(_token, dataItem.ProductId);
    }

    private async void OnRowUpdating(ProductsModel updatingDataItem, Dictionary<string, object> newValues)
    {
        var type = updatingDataItem.GetType();
        foreach(var value in newValues)
        {
            var property = type.GetProperty(value.Key);
            var propertyType = property.PropertyType;
            if(property.PropertyType == typeof(double))
            {
                var data = Convert.ToDouble(value.Value);
                property.SetValue(updatingDataItem, data);
            }
            else if(property.PropertyType == typeof(int))
            {
                var data = Convert.ToInt32(value.Value);
                property.SetValue(updatingDataItem, data);
            }
            else
            {
                property.SetValue(updatingDataItem, value.Value.ToString());
            }
        }

        await ProductService.AddOrUpdateProductAsync(_token, updatingDataItem);
    }

}