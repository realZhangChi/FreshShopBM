#pragma checksum "c:\Users\Chi\FreshShopBM\Pages\ProductManage.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0b915437c24b79fd10a3bf97783d552776d932ab"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FreshShopBM.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using FreshShopBM.Shared;
    using System.IO;
    using DevExpress.Blazor;
    using FreshShopBM.Data;
    using FreshShopBM.Data.Models;
    using FreshShopBM.Data.Services.ProductService;
    using Blazor.FileReader;
    using Telerik.Blazor;
    using Telerik.Blazor.Components.Window;
    using Telerik.Blazor.Components.Button;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/productManage")]
    public class ProductManage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 95 "c:\Users\Chi\FreshShopBM\Pages\ProductManage.razor"
           
    private List<MainCategoryModel> mainCategories;
    private SubCategoryModel[] subCategories;
    private MainCategoryModel mainCategory;
    private SubCategoryModel subCategory;
    private List<ProductsModel> _products;
    private ElementRef fileUpload;
    private bool _subCategorySelected = false;
    private bool WindowVisible;

    private string _token;
    protected override async Task OnInitAsync()
    {
        _token = GlobalSetting.Instance.AccessToken;
        mainCategories = await ProductService.GetMainCategoriesAsync(_token);
    }

    private async void MainCategoryChanged(MainCategoryModel model)
    {
        mainCategory = model;
        if (string.IsNullOrWhiteSpace(_token))
        {
            _token = GlobalSetting.Instance.AccessToken;
        }

        subCategories = await ProductService.GetSubCategoriesAsync(_token, model.Id);
        StateHasChanged();
    }

    private async void SubCategoryChanged(SubCategoryModel model)
    {
        subCategory = model;
        if (string.IsNullOrWhiteSpace(_token))
        {
            _token = GlobalSetting.Instance.AccessToken;
        }

        _products = await ProductService.GetProductsAsync(_token, model.Id);
        StateHasChanged();
        _subCategorySelected = true;
    }

    private void ModifyBtnClicked(Guid sender)
    {

    }

    private async Task UploadFile()
    {
        var files = await FileReaderService.CreateReference(fileUpload).EnumerateFilesAsync();
        var file = files.First();
        var a = files.Count();
        using (MemoryStream memoryStream = await files.First().CreateMemoryStreamAsync(4096))
        {
            byte[] bytes = memoryStream.ToArray();

            var imageData = $"data:image/jpg;base64,{Convert.ToBase64String(bytes)}";
            var response = ProductService.UploadImage(_token, imageData);
        }
    }

    private async void OnRowInserting(Dictionary<string, object> newValues)
    {
        var type = typeof(ProductsModel);
        var newProduct = new ProductsModel();
        newProduct.SubCategoryId = subCategory.Id;
        newProduct.PictureUrl = "https://www.alwayslight.cn/images/daBaiCai.jpg";
        foreach(var value in newValues)
        {
            var property = type.GetProperty(value.Key);
            if(property.PropertyType == typeof(double))
            {
                var data = Convert.ToDouble(value.Value);
                property.SetValue(newProduct, data);
            }
            else if(property.PropertyType == typeof(int))
            {
                var data = Convert.ToInt32(value.Value);
                property.SetValue(newProduct, data);
            }
            else
            {
                property.SetValue(newProduct, value.Value.ToString());
            }
        }
        await ProductService.AddOrUpdateProductAsync(_token, newProduct);
    }

    private async void OnRowRemoving(ProductsModel dataItem)
    {
        await ProductService.DeleteProductAsync(_token, dataItem.ProductId);
    }

    private async void OnRowUpdating(ProductsModel updatingDataItem, Dictionary<string, object> newValues)
    {
        var type = updatingDataItem.GetType();
        foreach(var value in newValues)
        {
            var property = type.GetProperty(value.Key);
            var propertyType = property.PropertyType;
            if(property.PropertyType == typeof(double))
            {
                var data = Convert.ToDouble(value.Value);
                property.SetValue(updatingDataItem, data);
            }
            else if(property.PropertyType == typeof(int))
            {
                var data = Convert.ToInt32(value.Value);
                property.SetValue(updatingDataItem, data);
            }
            else
            {
                property.SetValue(updatingDataItem, value.Value.ToString());
            }
        }

        await ProductService.AddOrUpdateProductAsync(_token, updatingDataItem);
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileReaderService FileReaderService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime IJSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private WeatherForecastService ForecastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProductService ProductService { get; set; }
    }
}
#pragma warning restore 1591
